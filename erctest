// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

// Interface for ERC-20 tokens
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract TradingStrategy {

    address public owner;
    IERC20 public token;
    mapping(address => uint256) public deposits;
    mapping(address => uint256) public initialBalances;
    uint256 public constant FEE_PERCENTAGE = 1;

    constructor(address _tokenAddress) {
        owner = msg.sender;
        token = IERC20(_tokenAddress);
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Not the contract owner");
        _;
    }

    // Deposit tokens to the contract
    function deposit(uint256 amount) external {
        require(amount > 0, "Amount must be greater than zero");
        token.transferFrom(msg.sender, address(this), amount);
        deposits[msg.sender] += amount;
        if (initialBalances[msg.sender] == 0) {
            initialBalances[msg.sender] = amount;
        }
    }

    // Example strategy script function
    function executeStrategy() external {
        // Example trading logic (pseudo code, replace with actual logic)
        // e.g., buying/selling tokens, interacting with other contracts, etc.
    }

    // Withdraw tokens from the contract
    function withdraw() external {
        uint256 balance = deposits[msg.sender];
        require(balance > 0, "No balance to withdraw");

        uint256 profit = calculateProfit(msg.sender);
        if (profit > 0) {
            uint256 fee = (profit * FEE_PERCENTAGE) / 100;
            token.transfer(owner, fee); // Transfer fee to owner
            balance -= fee;
        }

        token.transfer(msg.sender, balance);
        deposits[msg.sender] = 0;
        initialBalances[msg.sender] = 0;
    }

    // Calculate profit for a user
    function calculateProfit(address user) public view returns (uint256) {
        uint256 initialBalance = initialBalances[user];
        uint256 currentBalance = deposits[user];
        if (currentBalance > initialBalance) {
            return currentBalance - initialBalance;
        } else {
            return 0;
        }
    }
}